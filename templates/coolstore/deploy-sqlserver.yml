kind: Template
apiVersion: v1
metadata:
  annotations:
    description: Application template Coolstore Monolith using Git source build & SQL Server
    iconClass: icon-jboss
    tags: eap,sqlserver,javaee,java,database,jboss,xpaas
    version: 1.0.0
    openshift.io/display-name: Red Hat Demos - Coolstore Monnolith using source build
  name: coolstore-monolith-sqlserver
labels:
  template: coolstore-monolith-sqlserver
message: The resources (build config, deploy config, service, imagestreams, etc) for
  running the Coolstore Monolith SQL Server demo has been created in your project.
objects:
- apiVersion: v1
  stringData:
    database-name: "${SQLSERVER_DATABASE_NAME}"
    database-password: "${SQLSERVER_PASSWORD}"
    database-user: "sa"
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    labels:
      app: coolstore
    name: coolstore-sqlserver
  type: Opaque
- kind: Service
  apiVersion: v1
  spec:
    ports:
    - port: 1433
      targetPort: 1433
    selector:
      deploymentConfig: "${SQLSERVER_SERVICE_NAME}"
  metadata:
    name: "${SQLSERVER_SERVICE_NAME}"
    labels:
      application: coolstore
    annotations:
      description: The database server's port.
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${SQLSERVER_SERVICE_NAME}"
    labels:
      application: coolstore
  spec:
    strategy:
      type: Recreate
      recreateParams:
        post:
          failurePolicy: ignore
          execNewPod:
            containerName: "${SQLSERVER_SERVICE_NAME}" 
            command:
            - /bin/sh
            - '-c'
            - >-
              sleep 10 && /opt/mssql-tools/bin/sqlcmd -U sa -P ${SQLSERVER_PASSWORD} -S
              ${SQLSERVER_SERVICE_NAME} -Q "CREATE DATABASE ${SQLSERVER_DATABASE_NAME}"
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${SQLSERVER_SERVICE_NAME}"
        from:
          kind: ImageStreamTag
          namespace: ${IMAGE_STREAM_NAMESPACE}
          name: sqlserver:latest
    - type: ConfigChange
    replicas: 1
    selector:
      deploymentConfig: "${SQLSERVER_SERVICE_NAME}"
    template:
      metadata:
        name: "${SQLSERVER_SERVICE_NAME}"
        labels:
          deploymentConfig: "${SQLSERVER_SERVICE_NAME}"
          application: coolstore
      spec:
        containers:
        - name: "${SQLSERVER_SERVICE_NAME}"
          image: ''
          imagePullPolicy: IfNotPresent
          readinessProbe:
            tcpSocket:
              port: 1433
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: 1433
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          ports:
          - containerPort: 1433
            protocol: TCP
          env:
          - name: ACCEPT_EULA
            value: "Y"
          - name: SA_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: coolstore-sqlserver
          volumeMounts:
            - mountPath: /var/opt/mssql
              name: sqlserver-1
        terminationGracePeriodSeconds: 60
        volumes:
        - emptyDir: {}
          name: sqlserver-1
parameters:
- displayName: ImageStream Namespace
  description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  name: IMAGE_STREAM_NAMESPACE
  value: openshift
  required: true
- displayName: SQL Server Service Name
  name: SQLSERVER_SERVICE_NAME
  value: sqlserver
  required: true
- displayName: SQL Server SA Password
  name: SQLSERVER_PASSWORD
  from: '[#-$]{1}[a-zA-Z]{10}[0-9]{2}'
  generate: expression
  required: true
- displayName: SQL Server Database Name
  name: SQLSERVER_DATABASE_NAME
  value: monolith
  required: true
- displayName: SQL Server Port
  name: SQLSERVER_PORT
  value: "1433"
  required: true